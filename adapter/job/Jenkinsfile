    pipeline {
        agent any
        tools {
            maven 'maven-3.6.2'
        }
        stages {
            stage('Build do projeto e da imagem') {
                steps {
                    script{
                        sh 'mvn clean install -P dev'
                        appName = "udiapub-job-image"
                        registryHost = "127.0.0.1:30400/"
                        imageName = "${registryHost}${appName}:latest" //  imageName = "${registryHost}${appName}:${tag}"
                        customImage = docker.build("${imageName}", "./adapter/job")
                        //def customImage = docker.build('${imageName}', './adapter/job')
                    }
                }
            }
            stage('Testando a imagem') {
                steps {
                    script{
                         sh '''#!/bin/sh

                                echo "verificar e remover container de teste em execução"
                                HAS_CONTAINER=$(docker ps -a -aq --filter name=udiapub-job_teste)
                                if [ ${#HAS_CONTAINER} -ge 2 ]; then
                                  docker rm -f $HAS_CONTAINER
                                fi


                                echo "executar a imagem do container"
                                docker run -d --name udiapub-job_teste udiapub-job-image-build


                                echo "esperando a aplicação subir por 25 seg"
                                NEXT_WAIT_TIME=0
                                APP_STATUS=
                                until [ $NEXT_WAIT_TIME -gt 5 ] || [ ${#APP_STATUS} -gt 0  ]; do
                                  sleep 5;
                                  APP_STATUS=$(docker logs udiapub-job_teste | grep "Started UdiaPubJobApplication")
                                  NEXT_WAIT_TIME=$(( $NEXT_WAIT_TIME + 1 ));
                                done


                                echo "derrubando o container após utiliza-lo no teste"
                                docker rm -f udiapub-job_teste


                                echo "verificar se no log contem o texto \'Started UdiaPubJobApplication\' para considerar que subiu com sucesso"
                                if [ ${#APP_STATUS} -eq 0 ]; then
                                  exit 1
                                fi'''

                        customImage.push()
                    }
                }
            }
            stage('Deploy da aplicação no k8s') {
                steps {
                    withKubeConfig([credentialsId: '68f8f514-42d5-4579-8ed5-d65f1ad0b8e5']) {
                        // sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                        // sh 'chmod u+x ./kubectl'
                        sh "./kubectl apply -f adapter/job/k8s.yml --namespace=default"
                        sh "./kubectl set image deployment job-udiapub-deployment job-udiapub-container=${imageName} --record --namespace=default"
                        sh "./kubectl rollout status deployment/job-udiapub-deployment --namespace=default"
                    }
                }
            }
        }
    }