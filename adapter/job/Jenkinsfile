    pipeline {
        agent any
        tools {
            maven 'maven-3.6.2'
        }
        stages {
            stage('Build do projeto e da imagem') {
                steps {
                    script{
                        tag = env.GIT_BRANCH
                        appEnv = tag.equals("dev")  ? "dev" : "prod"
                        jobBuild = "udiapub-jobs-deploy-${appEnv}"

                        sh "mvn clean install -P ${appEnv}"
                        appName = "udiapub-job-image"
                        registryHost = "127.0.0.1:30910/"
                        imageName = "${appName}"
                        //imageName = "${registryHost}${appName}:${tag}"
                        //customImage = docker.build("${imageName}", "./adapter/job")
                        customImage = docker.build("${imageName}", "./adapter/job")
                    }
                }
            }
            stage('Testando a imagem') {
                steps {
                    script{
//                         sh "CONTAINER_NAME=udiapub-job_teste"
//                         sh "IMAGE_NAME=${imageName}"
                        sh '''#!/bin/sh

                        echo "1 - verificando se existe um container de teste em execução"
                        HAS_CONTAINER=$(docker ps -a -aq --filter name=udiapub-job_teste)
                        if [ ${#HAS_CONTAINER} -ge 2 ]; then
                          echo " --> existe! realizando remoção"
                          docker rm -f $HAS_CONTAINER
                        fi


                        echo "2 - executando a imagem do container no ambiente de teste"
                        docker run -d --name udiapub-job_teste -e APP_ENV="-Dspring.profiles.active=test" udiapub-job-image


                        echo "3 - esperando a aplicação subir por até 25 seg"
                        NEXT_WAIT_TIME=0
                        APP_STATUS=
                        until [ $NEXT_WAIT_TIME -gt 5 ] || [ ${#APP_STATUS} -gt 0  ]; do
                        sleep 5;
                          APP_STATUS=$(docker logs udiapub-job_teste | grep "Started UdiaPubJobApplication")
                          NEXT_WAIT_TIME=$(( $NEXT_WAIT_TIME + 1 ));
                        done


                        echo "4 - derrubando o container após utiliza-lo no teste"
                        docker rm -f udiapub-job_teste


                        echo "5 - verificando o status da aplicação"
                        if [ ${#APP_STATUS} -eq 0 ]; then
                          echo " --> a applicação não foi executada com sucesso"
                          exit 1
                        fi'''
                    }
                }
            }
            stage (deploy) {
                steps {
                    script {
                        customImage.push()
                        build job: "${jobBuild}", wait: false, parameters: [[$class: 'StringParameterValue', name: 'image', value: "${imageName}"]]
                    }
                }
            }
        }
    }